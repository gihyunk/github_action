name: reusable-build-image-on-push
on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string

jobs:
  ecr-push:
    name: Build and publish docker images
    runs-on: [general-x64]
    defaults:
      run:
        working-directory: ./${{ inputs.project }}
    environment: production
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Extract tag for image
        shell: bash
        run: |
          githash=$(git rev-parse --short "$GITHUB_SHA")
          branch="${GITHUB_REF#refs/heads/}"
          result="${branch//\//-}"
          tag="${result//\//-}-$githash"
          echo $result
          echo "branch=$result" >> $GITHUB_ENV
          echo "tag=$tag" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.project }}
          PROJECT: ${{ inputs.project }}
        run: |
          if [ "$PROJECT" == "tokotalk-shop-nuxt" ]; then
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-static:${{ env.tag }} --build-arg DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} --target client .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY-static:${{ env.tag }} 
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY-static:${{ env.tag }} $ECR_REGISTRY/$ECR_REPOSITORY-static:${{ env.branch }}
            docker push $ECR_REGISTRY/$ECR_REPOSITORY-static:${{ env.branch }}
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }} --build-arg DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} --target server .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }}
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }} $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.branch }}
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.branch }}
          elif [ "$PROJECT" == "tokotalk-cart-service" ] || [ "$PROJECT" == "tokotalk-api" ] || [ "$PROJECT" == "tokotalk-facebook-service" ] || [ "$PROJECT" == "tokotalk-google-service" ]; then
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-migration:${{ env.tag }} --build-arg DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} --target migration .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY-migration:${{ env.tag }} 
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY-migration:${{ env.tag }} $ECR_REGISTRY/$ECR_REPOSITORY-migration:${{ env.branch }}
            docker push $ECR_REGISTRY/$ECR_REPOSITORY-migration:${{ env.branch }}

            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }} --build-arg DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} --target server .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }}
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }} $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.branch }}
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.branch }}
          else
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }} --build-arg DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }}
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }} $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.branch }}
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.branch }}
          fi